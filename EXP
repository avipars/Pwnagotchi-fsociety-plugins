import logging
import os
import json
import pwnagotchi.plugins as plugins
import pwnagotchi.ui.fonts as fonts
from pwnagotchi.ui.components import LabeledValue
from pwnagotchi.ui.view import BLACK

# Static Variables
TAG = "[EXP Plugin]"

class EXP(plugins.Plugin):
    __author__ = 'GaelicThunder, Kaska89, Rai, JayofElony, Terminator, & bryzz42o'
    __version__ = '2.0.1'
    __license__ = 'GPL3'
    __description__ = 'Get exp every time a handshake get captured.'

    def __init__(self):
        self.percent = 0
        self.strength = 1
        self.calculateInitialXP = False
        self.xp = 0
        self.lv = 1
        self.xp_tot = 0
        self.symbol_count = 10  # Define the symbol count for the EXP bar

    def on_loaded(self):
        logging.info(TAG + " Plugin loaded")

    def on_ui_setup(self, ui):
        ui.add_element('Level', LabeledValue(color=BLACK, label='Level', value='',
                                             position=(0, 205),
                                             label_font=fonts.Bold, text_font=fonts.Medium))
        ui.add_element('XP', LabeledValue(color=BLACK, label='XP', value='',
                                          position=(0, 225),
                                          label_font=fonts.Bold, text_font=fonts.Medium))
        ui.add_element('EXPBar', LabeledValue(color=BLACK, label='EXP', value='',
                                              position=(0, 245),
                                              label_font=fonts.Bold, text_font=fonts.Medium))

    def on_ui_update(self, ui):
        self.xp_needed = self.calcExpNeeded(self.lv)
        self.percent = int((self.xp / self.xp_needed) * 100)
        bar = self.generate_exp_bar(self.percent)
        ui.set('Level', str(self.lv))
        ui.set('XP', str(self.xp))
        ui.set('EXPBar', bar)

    def calcExpNeeded(self, level):
        if level == 1:
            return 5
        return int((level ** 3) / 2)

    def generate_exp_bar(self, percent):
        bar_length = int(percent / (100 / self.symbol_count))  # Adjusted to use self.symbol_count
        filled_segments = '█' * bar_length
        empty_segments = '░' * (self.symbol_count - bar_length)
        exp_bar = f'|{filled_segments}{empty_segments}|'
        return exp_bar
